name: Create Release

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
  workflow_dispatch:  # Allows manual triggering

jobs:
  release:
    runs-on: windows-latest  # Use a Windows runner to support Inno Setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.0
        with:
          ref: main
      
      - name: Get Version from package.json
        id: get_version
        run: |
            $version = (Get-Content package.json | ConvertFrom-Json).version
            echo "TAG_NAME=$version" >> $env:GITHUB_ENV
        shell: pwsh

      # - name: Cleanup Old Artifacts
      #   run: |
      #     # Set variables
      #     GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
      #     REPO="rdm10br/UI_BB_PY_AUTO"  # Replace with your repository name, e.g., "your-username/your-repo"
      #     THRESHOLD_DAYS=7    # Set the threshold for old artifacts

      #     # Get the current date in seconds since epoch
      #     CURRENT_DATE=$(date +%s)

      #     # Fetch all artifacts
      #     ARTIFACTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
      #                     -H "Accept: application/vnd.github.v3+json" \
      #                     "https://api.github.com/repos/$REPO/actions/artifacts")

      #     # Iterate through artifacts
      #     for row in $(echo "${ARTIFACTS}" | jq -r '.artifacts[] | @base64'); do
      #       _jq() {
      #         echo "${row}" | base64 --decode | jq -r "${1}"
      #       }

      #       # Get artifact name and creation date
      #       ARTIFACT_NAME=$(_jq '.name')
      #       CREATED_AT=$(_jq '.created_at')

      #       # Convert created_at to seconds since epoch
      #       ARTIFACT_DATE=$(date -d "$CREATED_AT" +%s)

      #       # Calculate the age of the artifact in days
      #       AGE=$(( (CURRENT_DATE - ARTIFACT_DATE) / (60*60*24) ))

      #       # Check if the artifact is older than the threshold
      #       if [ "$AGE" -gt "$THRESHOLD_DAYS" ]; then
      #         # Delete the artifact
      #         echo "Deleting artifact: $ARTIFACT_NAME (Age: $AGE days)"
      #         ARTIFACT_ID=$(_jq '.id')
      #         curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
      #           "https://api.github.com/repos/$REPO/actions/artifacts/$ARTIFACT_ID"
      #       fi
      #     done
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Clone additional GitHub repo into scripts folder
        run: |
            git clone https://github.com/rdm10br/BB_Py_Automation.git scripts/BB_Py_Automation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.4.0'

      - name: Install dependencies
        run: |
            npm install

      # - name: List Cloned Files for Debugging
      #   run: |
      #     ls -Recurse | Where-Object { $_.FullName -notmatch 'node_modules' }

      # - name: List Cloned Files for Debugging
      #   run: |
      #     dir /scripts/BB_Py_Automation /s
      
      - name: Create Mock JSON Files
        run: |
          mkdir -p scripts/BB_Py_Automation/src/Metodos/Login/__pycache__
          echo "{`n    `"username`": `"username`",`n    `"password`": `"password`"`n}" > scripts/BB_Py_Automation/src/Metodos/Login/__pycache__/login.json
          echo "{`n    `"timestamp`": `"1500-01-01T00:00:00.000000`",`n    `"cookies`": []`n}" > scripts/BB_Py_Automation/src/Metodos/Login/__pycache__/login_cache.json
        #  echo "{\n\"username\": \"username\",\n \"password\": \"password\"\n}" > scripts/BB_Py_Automation/src/Metodos/Login/__pycache__/login.json
        #  echo "{\n\"timestamp\": \"1500-01-01T00:00:00.000000\",\n \"cookies\": []\n}" > scripts/BB_Py_Automation/src/Metodos/Login/__pycache__/login_cache.json

      # - name: Test Show cache content
      #   run: |
      #     Get-Content scripts/BB_Py_Automation/src/Metodos/Login/__pycache__/login.json
      #     Get-Content scripts/BB_Py_Automation/src/Metodos/Login/__pycache__/login_cache.json

      # - name: List Cloned Files for Debugging2
      #   run: |
      #     ls -Recurse | Where-Object { $_.FullName -notmatch 'node_modules' }

      - name: Build Nextron.js app
        run: |
            npm run build

      # - name: List Cloned Files for Debugging
      #   run: |
      #     ls -Recurse | Where-Object { $_.FullName -notmatch 'node_modules' }

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nextron-build
          path: ./dist/win-unpacked
          
      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; `
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install Inno Setup
        run: |
          choco install innosetup

      - name: Build the Inno Setup Installer
        run: |
          # Assuming you have an Inno Setup script (.iss) in your repo
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "build/installer/setup.iss"
        env:
          VERSION: ${{ env.TAG_NAME }}
          
      # - name: List Cloned Files for Debugging
      #   run: |
      #     ls -Recurse | Where-Object { $_.FullName -notmatch 'node_modules' }

      - name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: setup-installer
          path: build/installer/Output/BlackBot.exe

      - name: Generate Release Notes
        id: release_notes
        run: |
            $PREVIOUS_TAG = git describe --tags --abbrev=0 2>$null
  
            if ([string]::IsNullOrEmpty($PREVIOUS_TAG)) {
              $release_notes = git log --oneline --pretty=format:"%h %s" | ForEach-Object { ":seedling: $_" }
            } else {
              $release_notes = git log $PREVIOUS_TAG..$TAG_NAME --oneline --pretty=format:"%h %s" | ForEach-Object { ":seedling: $_" }
            }
            
            echo "RELEASE_NOTES=$release_notes" >> $env:GITHUB_ENV

      # - name: List Contents of dist
      #   run: Get-ChildItem -Path ./dist -Force

      # - name: List Contents of Output
      #   run: Get-ChildItem -Path build/installer/Output -Force

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.TAG_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          assets: |
            ./dist/win-unpacked/*
            build/installer/Output/BlackBot.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}