name: Create Release

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
  workflow_dispatch:  # Allows manual triggering

jobs:
  release:
    runs-on: windows-latest  # Use a Windows runner to support Inno Setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.0
        with:
          ref: main

      - name: Check for [test] in commit message
        id: check_test_commit
        run: |
          if git log -1 --pretty=%B | grep -q '\[test\]'; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi
        shell: bash
      
      - name: Get Version from package.json
        if: env.skip == 'false'
        id: get_version
        run: |
            $version = (Get-Content package.json | ConvertFrom-Json).version
            echo "TAG_NAME=$version" >> $env:GITHUB_ENV
        shell: pwsh
        
      - name: Clone additional GitHub repo into scripts folder
        if: env.skip == 'false'
        run: |
            git clone https://github.com/rdm10br/BB_Py_Automation.git scripts/BB_Py_Automation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Node.js
        if: env.skip == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: '22.4.0'

      - name: Install dependencies
        if: env.skip == 'false'
        run: |
            npm install
      
      - name: Create Mock JSON Files
        if: env.skip == 'false'
        run: |
          mkdir -p scripts/BB_Py_Automation/src/Metodos/Login/__pycache__
          echo "{`n    `"username`": `"username`",`n    `"password`": `"password`"`n}" > scripts/BB_Py_Automation/src/Metodos/Login/__pycache__/login.json
          echo "{`n    `"timestamp`": `"1500-01-01T00:00:00.000000`",`n    `"cookies`": []`n}" > scripts/BB_Py_Automation/src/Metodos/Login/__pycache__/login_cache.json

      - name: Create Mock .env File
        if: env.skip == 'false'
        run: |
          echo "GITHUB_TOKEN=${{ secrets.PERSONAL_GITHUB_TOKEN  }}" > .env

      # - name: List Cloned Files for Debugging2
      #   run: |
      #     ls -Recurse | Where-Object { $_.FullName -notmatch 'node_modules' }

      - name: Build Nextron.js app
        if: env.skip == 'false'
        run: |
            npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install Chocolatey
        if: env.skip == 'false'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; `
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install Inno Setup
        if: env.skip == 'false'
        run: |
          choco install innosetup

      - name: List Cloned Files for Debugging2
        run: |
          ls -Recurse | Where-Object { $_.FullName -notmatch 'node_modules' }

      - name: Build the Inno Setup Installer
        if: env.skip == 'false'
        run: |
          # Assuming you have an Inno Setup script (.iss) in your repo
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "build/installer/setup.iss"
        env:
          VERSION: ${{ env.TAG_NAME }}

      - name: Generate Release Notes
        if: env.skip == 'false'
        id: release_notes
        run: |
            $PREVIOUS_TAG = git describe --tags --abbrev=0 2>$null
  
            if ([string]::IsNullOrEmpty($PREVIOUS_TAG)) {
              $release_notes = git log --oneline --pretty=format:"%h %s" | ForEach-Object { ":seedling: $_" }
            } else {
              $release_notes = git log $PREVIOUS_TAG..$TAG_NAME --oneline --pretty=format:"%h %s" | ForEach-Object { ":seedling: $_" }
            }
            
            echo "RELEASE_NOTES=$release_notes" >> $env:GITHUB_ENV

      - name: Create GitHub Release,
        if: env.skip == 'false'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.TAG_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          # assets: |
          #   ./dist/*
          #   build/installer/Output/BlackBot-Setup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Upload assets individually
      - name: Upload BlackBot-Setup executable
        if: env.skip == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/installer/Output/BlackBot-Setup.exe
          asset_name: BlackBot-Setup.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find Blockmap File
        if: env.skip == 'false'
        run: |
          $blockmapFile = Get-ChildItem -Path ./dist -Filter *.blockmap -File -Recurse | Select-Object -First 1
          if ($blockmapFile) {
            echo "BLOCKMAP_FILE=$($blockmapFile.FullName)" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Set Blockmap Filename
        if: env.skip == 'false'
        id: blockmap_filename
        run: echo "BLOCKMAP_FILENAME=$(basename $BLOCKMAP_FILE)" >> $GITHUB_ENV
        shell: bash

      - name: Upload Blockmap file
        if: env.BLOCKMAP_FILE != '' && env.skip == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BLOCKMAP_FILE }}
          asset_name: ${{ env.BLOCKMAP_FILENAME }}
          asset_content_type: application/json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload latest yaml
        if: env.skip == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/latest.yml
          asset_name: latest.yml
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload BlackBot-Setup for updater
        if: env.skip == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/BlackBot-Setup-${{ env.TAG_NAME }}.exe
          asset_name: BlackBot-Setup-${{ env.TAG_NAME }}.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}