name: Continuous Integration

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering


jobs:
  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for [test] in commit message
        id: check_test_commit
        run: |
          if git log -1 --pretty=%B | grep -q '\[test\]'; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: Get current version from package.json
        if: env.skip == 'false'
        id: get_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current version is $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Determine version bump
        if: env.skip == 'false'
        id: determine_bump
        run: |
          # Default to patch version bump
          VERSION_BUMP="patch"

          # Check for keywords in the commit message to determine the bump type
          if git log -1 --pretty=%B | grep -qE '\[major\]'; then
            VERSION_BUMP="major"
          elif git log -1 --pretty=%B | grep -qE '\[minor\]'; then
            VERSION_BUMP="minor"
          fi

          echo "Version bump type: $VERSION_BUMP"
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_ENV

      - name: Bump version accordingly
        if: env.skip == 'false'
        id: bump_version
        run: |
          CURRENT_VERSION=${{ env.current_version }}
          VERSION_BUMP=${{ env.version_bump }}

          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          case "$VERSION_BUMP" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
          esac

          echo "New version is $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update package.json version
        if: env.skip == 'false'
        run: |
            NEW_VERSION=${{ env.new_version }}
            jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json

      - name: Commit updated package.json
        if: env.skip == 'false'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add package.json
          git commit -m "ðŸ’š CI: Update package.json version to ${{ env.new_version }}"
          git push