name: Create Pull Request

on:
  push:
    branches:
      - 'dev'
    paths-ignore:
      - '.github/**'

jobs:
  create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get commit message
        id: extract_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_ENV
          if [[ "$COMMIT_MESSAGE" != *"[pull-request]"* ]]; then
            echo "No '[pull-request]' in commit message, skipping PR creation."
            exit 0
          fi

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get the last pull request
        id: last_pr
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed",
              sort: "updated",
              direction: "desc",
              per_page: 1,
            });
            const lastPr = pulls[0] || {};
            core.setOutput("merge_commit_sha", lastPr.merge_commit_sha || "null");

      - name: Get commits since the last PR
        id: commits_since
        run: |
          LAST_PR_SHA=${{ steps.last_pr.outputs.merge_commit_sha }}
          echo "Last PR SHA: $LAST_PR_SHA"
          git fetch --all --tags

          # Ensure the SHA exists
          if ! git rev-parse "$LAST_PR_SHA" >/dev/null 2>&1; then
            echo "Invalid or missing SHA: $LAST_PR_SHA. Including all commits."
            COMMITS=$(git log --oneline)
          elif [ "$(git rev-parse HEAD)" = "$LAST_PR_SHA" ]; then
            echo "No new commits since $LAST_PR_SHA."
            COMMITS=""
          else
            echo "Fetching commits since $LAST_PR_SHA."
            COMMITS=$(git log --oneline "$LAST_PR_SHA"..HEAD)
          fi

          # Exit if no commits are found
          if [ -z "$COMMITS" ]; then
            echo "No commits to include. Exiting."
            exit 0
          fi

          echo "commits_body=$COMMITS" >> $GITHUB_ENV
          echo "Formatted commits: $COMMITS"

      - name: Determine PR title
        id: determine_pr_title
        run: |
          PR_TITLE="Automated PR from ${{ github.ref_name }}"
          if [[ "${{ env.commit_message }}" == *"[major]"* ]]; then
            PR_TITLE="$PR_TITLE [major]"
          elif [[ "${{ env.commit_message }}" == *"[minor]"* ]]; then
            PR_TITLE="$PR_TITLE [minor]"
          fi
          echo "pr_title=$PR_TITLE" >> $GITHUB_ENV

      - name: Create Pull Request
        if: success()
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          head: ${{ github.ref_name }}
          title: ${{ env.pr_title }}
          body: |
            ### Commits included in this PR:
            ${{ env.commits_body }}