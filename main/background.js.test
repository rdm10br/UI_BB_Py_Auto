import path from "path";
import { app, ipcMain } from "electron";
import serve from "electron-serve";
import { createWindow } from "./helpers";
import { autoUpdater } from "electron-updater";
import pythonProcessController from "./controllers/pythonProcess";
import updaterController from "./controllers/updater";
import { setupIPC } from "./ipc";

const isProd = process.env.NODE_ENV === "production";
const isWindows = process.platform === "win32";

if (isProd) {
  serve({ directory: "app" });
} else {
  app.setPath("userData", `${app.getPath("userData")} (development)`);
}

(async () => {
  await app.whenReady();
  const iconPath = "renderer/public/icon/1bad.png";

  const mainWindow = createWindow("main", {
    width: 900,
    height: 600,
    icon: iconPath,
    webPreferences: {
      preload: path.join(__dirname, "preload.js"),
      contextIsolation: true,
      enableRemoteModule: false,
      nodeIntegration: false,
      sandbox: true,
      additionalArguments: [
        "--disable-autofill",
        "--disable-features=Autofill",
      ],
    },
  });

  autoUpdater.checkForUpdatesAndNotify();
  await mainWindow.setMenuBarVisibility(false);

  if (isProd) {
    await mainWindow.loadURL("app://./home");
  } else {
    const port = process.argv[2];
    await mainWindow.loadURL(`http://localhost:${port}/home`);
  }

  pythonProcessController.initPythonProcess(mainWindow);
  updaterController.initAutoUpdater(mainWindow);

  // Set up all IPC handlers
  setupIPC(mainWindow, autoUpdater);
})();

app.on("window-all-closed", () => {
  if (isWindows) {
    pythonProcessController.terminatePythonProcess();
    app.quit();
  } else {
    app.quit();
  }
});