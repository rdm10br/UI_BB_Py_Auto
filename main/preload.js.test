// import { contextBridge } from 'electron';
// import ipcHandler from './controller/ipcHandler';
// import githubAPI from './controller/githubAPI';
// import fileAPI from './controller/fileAPI';
// import envAPI from './controller/envAPI';

// // Expose IPC handler to the renderer process
// contextBridge.exposeInMainWorld('ipc', ipcHandler);

// // Expose GitHub API functions
// contextBridge.exposeInMainWorld('githubAPI', githubAPI);

// // Expose File API functions
// contextBridge.exposeInMainWorld('fileAPI', fileAPI);

// // Expose Environment API functions
// contextBridge.exposeInMainWorld('envAPI', envAPI);

// import { contextBridge, ipcRenderer } from "electron";

// // Expose APIs to the renderer process securely
// contextBridge.exposeInMainWorld("electronAPI", {
//   runPythonScript: (scriptPath) => ipcRenderer.send("run-python", scriptPath),
//   pausePythonScript: () => ipcRenderer.send("pause-python"),
//   resumePythonScript: () => ipcRenderer.send("resume-python"),
//   stopPythonScript: () => ipcRenderer.send("stop-python"),
//   checkForUpdates: () => ipcRenderer.send("check-for-updates"),
//   quitAndInstall: () => ipcRenderer.send("quit-and-install"),
//   openExcelFile: (filePath) => ipcRenderer.send("open-excel-file", filePath),
//   // Other APIs as needed
// });

import { contextBridge, ipcRenderer } from 'electron';

// Create your ipcHandler here
const ipcHandler = {
  send: (channel, value) => ipcRenderer.send(channel, value),
  on: (channel, callback) => {
    const subscription = (_event, ...args) => callback(...args);
    ipcRenderer.on(channel, subscription);
    
    return () => {
      ipcRenderer.removeListener(channel, subscription);
    };
  },
};

// Expose the ipcHandler object through contextBridge
contextBridge.exposeInMainWorld('ipc', ipcHandler);