APIGradeColumn = f'''{baseURL}learn/api/public/v2/courses/{id_interno}/gradebook/columns'''

# id_externo=''
# externalID_API = f'{baseURL}learn/api/public/v1/courses/externalId:{id_externo}/contents'

# father_id = f'''{baseURL}learn/api/public/v1/courses/{id_interno}/contents'''
# internalID_API = f'{baseURL}learn/api/public/v1/courses/{id_interno}/contents/{father_id}/children?title={item_Search}'->id_atividade
# APIAssesmentID = f'''{baseURL}learn/api/v1/courses/{id_interno}/contents/{id_atividade}/children'''->id_assesment
# APIEncapsulamento = f'''{baseURL}learn/api/v1/courses/{id_interno}/assessments/{id_assesment}/questions/'''->id_encapsulamento
# APIBQItem = f'''{baseURL}learn/api/v1/courses/{id_interno}/assessments/{id_assesment}/questions/{id_encapsulamento}/questions?expand=sourceInfo'''->BQ associado

# JSON.parse(document.body.innerText).results.filter(item => item.title === "{item_Search}")[0].{config}

# request = '''() => {
# const data = JSON.parse(document.body.innerText).results;
# if (data && data.length > 0 && data[0].id) {
#     return data[0].id;
# } else {
#     throw new Error('{item_search} não encontrado na sala {id_interno}');
# }
# }'''

id_discussion = '' #f'{baseURL}learn/api/public/v1/courses/{id_interno}/contents'+'JSON.parse(document.body.innerText).results[1].contentHandler.targetId'
discussionGroups = f'{baseURL}learn/api/public/v1/courses/{id_interno}/contents/{id_discussion}/groups'
groupsID = f'{baseURL}learn/api/public/v2/courses/{id_interno}/groups/sets'
req_len = 'JSON.parse(document.body.innerText).results.length' #to see request length, especially groups

    config: typing.Optional[typing.Literal[
        'visible',
        'visibleInBook',
        'multipleAttempts',
        'aggregationModel',
        'possible',
        'id',
        'score.possible',
        'availability.available',
        'genericReadOnlyData.dueDate',
        'grading.scoringModel',
        'contentDetail["resource/x-bb-asmt-test-link"].test.assessment.id',
        'contentHandler.assessmentId',
        'contentDetail["resource/x-bb-asmt-test-link"].test.deploymentSettings.isRandomizationOfQuestionsRequired',
        'contentDetail["resource/x-bb-asmt-test-link"].test.deploymentSettings.isRandomizationOfAnswersRequired',
        'contentDetail["resource/x-bb-externallink"].url',
        'contentDetail["resource/x-bb-blti-link"].url',
        'contentHandler.url',
        'description']] = None

    item_Search: typing.Optional[typing.Literal[
        'Fórum de Interação entre Professores e Tutores',
        'Meu Desempenho',
        'Organize seus estudos com a Sofia',
        'Fale com o Tutor',
        'Desafio Colaborativo',
        'Unidade 1',
        'Unidade 2',
        'Unidade 3',
        'Unidade 4',
        'Atividade Contextualizada',
        'Relatório de Aulas Práticas',
        'WebAula',
        'Avaliações',
        'Solicite seu livro impresso',
        'SER Melhor (Clique Aqui para deixar seu elogio, crítica ou sugestão)',
        'AV1',
        'AV2',
        'AF',
        'Avaliação On-Line 1 (AOL 1) - Questionário',
        'Avaliação On-Line 2 (AOL 2) - Questionário',
        'Avaliação On-Line 3 (AOL 3) - Questionário',
        'Avaliação On-Line 4 (AOL 4) - Questionário',
        'Avaliação On-Line 5 (AOL 5) - Atividade Contextualizada',
        'Atividade de Autoaprendizagem 1',
        'Atividade de Autoaprendizagem 2',
        'Atividade de Autoaprendizagem 3',
        'Atividade de Autoaprendizagem 4',
        'Material Didático Interativo',
        'Biblioteca Virtual: e-Book',
        'Videoteca: Videoaulas']] = None

# print(f'Looking on Api Content for {item_Search} config {config} in'\
    #       f'{id_interno}')
    # await page.goto(url=internalID_API, wait_until='networkidle')
    # result = await page.evaluate(filteredRequest_columnName(item_Search, config))
    # return result

# config = 'genericReadOnlyData.dueDate'
            # print(f'Checking {item_Search} hand in date...')
            # result = await page.evaluate(filteredRequest_title(item_Search, config))


https://sereduc.blackboard.com/learn/api/v1/courses/_187869_1/contents/

const jsonData = JSON.parse(document.body.innerText).results;
const searchText = "";
const results = [];
const config = "";
function searchInJson (jsonData, searchText){
    for (const item of jsonData){
    if(item.title.includes(searchText) || item.description.includes(searchText)){
        results.push(item[config]);
        }
    }
    return results;
}
const searchResults = searchInJson(jsonData, searchText);
console.log(searchResults[0]);

JSON.parse(document.body.innerText).results.filter(item => item.title.includes("{item_Search}") || item.description.includes("{item_Search}")).map(item => item["{config}"])[0]
config = 'contentDetail"]["resource/x-bb-folder"].isFolder'


def filteredRequest_name(item_search: str, config: str):
        request = f'''() => {{
            const data = JSON.parse(document.body.innerText).results.find(item => item.name === "{item_search}");
            if (data && (data.{config}).toString) {{
                return data.{config};
            }} else {{
                throw new Error('{item_search} not found in room {id_interno}');
                }}
            }}'''
        return request